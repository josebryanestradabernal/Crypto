#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.1
#  in conjunction with Tcl version 8.6
#    Jun 02, 2021 02:56:56 AM CDT  platform: Windows NT
from os import read
from tkinter.filedialog import askopenfilename
from tkinter import *
from tkinter import messagebox
import sys
from Crypto import PublicKey
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA512, SHA384, SHA256, SHA, MD5
from Crypto import Random
from base64 import b64encode, b64decode
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import interfaz_support
import cifrados

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    interfaz_support.set_Tk_var()
    top = Toplevel1 (root)
    interfaz_support.init(root, top)
    rellenar_combokeys()
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    interfaz_support.set_Tk_var()
    top = Toplevel1 (w)
    interfaz_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x452+383+105")
        top.minsize(120, 1)
        top.maxsize(2394, 749)
        top.resizable(1,  1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.btnGenerar = tk.Button(top)
        self.btnGenerar.place(relx=0.733, rely=0.221, height=24, width=57)
        self.btnGenerar.configure(activebackground="#ececec")
        self.btnGenerar.configure(command=acctionButtonGenerar)
        self.btnGenerar.configure(activeforeground="#000000")
        self.btnGenerar.configure(background="#d9d9d9")
        self.btnGenerar.configure(disabledforeground="#a3a3a3")
        self.btnGenerar.configure(foreground="#000000")
        self.btnGenerar.configure(highlightbackground="#d9d9d9")
        self.btnGenerar.configure(highlightcolor="black")
        self.btnGenerar.configure(pady="0")
        self.btnGenerar.configure(text='''Generar''')

        self.btnComprobar = tk.Button(top)
        self.btnComprobar.place(relx=0.733, rely=0.288, height=24, width=77)
        self.btnComprobar.configure(activebackground="#ececec")
        self.btnComprobar.configure(command=acctionButtonComprobar)
        self.btnComprobar.configure(activeforeground="#000000")
        self.btnComprobar.configure(background="#d9d9d9")
        self.btnComprobar.configure(disabledforeground="#a3a3a3")
        self.btnComprobar.configure(foreground="#000000")
        self.btnComprobar.configure(highlightbackground="#d9d9d9")
        self.btnComprobar.configure(highlightcolor="black")
        self.btnComprobar.configure(pady="0")
        self.btnComprobar.configure(text='''Comprobar''')

        self.cmbKeys = ttk.Combobox(top)
        self.cmbKeys.place(relx=0.4, rely=0.221, relheight=0.046, relwidth=0.238)

        self.cmbKeys.configure(textvariable=interfaz_support.combobox)
        self.cmbKeys.configure(takefocus="")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.15, rely=0.221, height=21, width=144)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Seleccionar llave a usar:''')

        self.Text1 = tk.Text(top)
        self.Text1.place(relx=0.167, rely=0.376, relheight=0.562, relwidth=0.69)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="blue")
        self.Text1.configure(selectforeground="white")
        self.Text1.configure(wrap="word")

        self.verificado = tk.Checkbutton(top)
        self.verificado.place(relx=0.533, rely=0.288, relheight=0.077
                , relwidth=0.168)
        self.verificado.configure(activebackground="#ececec")
        self.verificado.configure(activeforeground="#000000")
        self.verificado.configure(background="#d9d9d9")
        self.verificado.configure(disabledforeground="#a3a3a3")
        self.verificado.configure(foreground="#000000")
        self.verificado.configure(highlightbackground="#d9d9d9")
        self.verificado.configure(highlightcolor="black")
        self.verificado.configure(justify='left')
        self.verificado.configure(state='disabled')
        self.verificado.configure(text='''Verificado''')
        self.verificado.configure(variable=interfaz_support.che51)

        self.btnFile = tk.Button(top)
        self.btnFile.place(relx=0.167, rely=0.31, height=24, width=97)
        self.btnFile.configure(activebackground="#ececec")
        self.btnFile.configure(activeforeground="#000000")
        self.btnFile.configure(command=acctionButtonOpenFile)
        self.btnFile.configure(background="#d9d9d9")
        self.btnFile.configure(cursor="fleur")
        self.btnFile.configure(disabledforeground="#a3a3a3")
        self.btnFile.configure(foreground="#000000")
        self.btnFile.configure(highlightbackground="#d9d9d9")
        self.btnFile.configure(highlightcolor="black")
        self.btnFile.configure(pady="0")
        self.btnFile.configure(text='''Abrir''')

def rellenar_combokeys():
    import os
    pub = os.listdir("llavesPublicas")
    priv = os.listdir("llavePrivada")
    interfaz_support.w.cmbKeys['values'] = pub + priv 


def acctionButtonOpenFile(): 
    global file
    file = askopenfilename()
    openfile = open(file)
    text = interfaz_support.w.Text1
    text.delete("1.0" ,"end")
    readfile = openfile.read()
    openfile.close()
    file = readfile
    file = bytes(file,"utf-8")
    #plain text
    text.insert(END,readfile)

def acctionButtonGenerar():
    global file 
    print(type(file))
    op = interfaz_support.w.cmbKeys.get()
    if (op.count("private")>0):
        cifrados.leerLlavePriv ("llavePrivada/"+op)
    privada = cifrados.privada
    signature = b64encode(cifrados.sign(file, privada))
    result = open ("sign.txt","wb")
    print (signature)
    result.write(file+b"\n-------------------------\n"+signature)
    result.close()
    text = interfaz_support.w.Text1
    text.delete("1.0" ,"end")
    #plain text
    text.insert(END,signature)

def acctionButtonComprobar():
    split =file.split(b"\n-------------------------\n")    
    mensa=split[0]
    sign = split[1]
    check = interfaz_support.che51
    op = interfaz_support.w.cmbKeys.get()
    if (op.count("public")>0):
        cifrados.leerLlavePub ("llavesPublicas/"+op)
    publica = cifrados.publica
    result = cifrados.verify(mensa,b64decode(sign),publica)
    print(result)
    if result:
        messagebox.showinfo(message="Coincidio la firma", title="Resultado")
    else :
        messagebox.showerror(message="El mensaje no coicidio", title="Failiure")
    check.set(result)
    

if __name__ == '__main__':
    vp_start_gui()





